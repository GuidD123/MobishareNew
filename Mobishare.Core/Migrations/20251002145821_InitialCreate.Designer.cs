// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mobishare.Core.Data;

#nullable disable

namespace Mobishare.Core.Migrations
{
    [DbContext(typeof(MobishareDbContext))]
    [Migration("20251002145821_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Mobishare.Core.Models.Corsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CostoFinale")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DataOraFine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataOraInizio")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdParcheggioPrelievo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdParcheggioRilascio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUtente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatricolaMezzo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<bool>("SegnalazioneProblema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Stato")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("InCorso");

                    b.Property<int?>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataOraInizio")
                        .HasDatabaseName("IX_Corse_DataOraInizio");

                    b.HasIndex("IdParcheggioPrelievo");

                    b.HasIndex("IdParcheggioRilascio");

                    b.HasIndex("IdUtente")
                        .HasDatabaseName("IX_Corse_IdUtente");

                    b.HasIndex("MatricolaMezzo")
                        .HasDatabaseName("IX_Corse_MatricolaMezzo");

                    b.HasIndex("Stato")
                        .HasDatabaseName("IX_Corse_Stato");

                    b.HasIndex("UtenteId");

                    b.HasIndex("IdUtente", "Stato")
                        .HasDatabaseName("IX_Corse_Utente_Stato");

                    b.HasIndex("MatricolaMezzo", "Stato")
                        .HasDatabaseName("IX_Corse_Matricola_Stato");

                    b.HasIndex("Stato", "DataOraInizio")
                        .HasDatabaseName("IX_Corse_Stato_DataInizio");

                    b.ToTable("Corse");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Commento")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("IdCorsa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUtente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Valutazione")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataFeedback")
                        .HasDatabaseName("IX_Feedback_DataFeedback");

                    b.HasIndex("IdCorsa")
                        .HasDatabaseName("IX_Feedback_IdCorsa");

                    b.HasIndex("IdUtente")
                        .HasDatabaseName("IX_Feedback_IdUtente");

                    b.HasIndex("Valutazione")
                        .HasDatabaseName("IX_Feedback_Valutazione");

                    b.HasIndex("IdCorsa", "Valutazione")
                        .HasDatabaseName("IX_Feedback_Corsa_Valutazione");

                    b.HasIndex("IdUtente", "IdCorsa")
                        .IsUnique()
                        .HasDatabaseName("IX_Feedback_Utente_Corsa_Unique");

                    b.HasIndex("Valutazione", "DataFeedback")
                        .HasDatabaseName("IX_Feedback_Valutazione_Data");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Mezzo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdParcheggioCorrente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LivelloBatteria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<string>("Matricola")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdParcheggioCorrente")
                        .HasDatabaseName("IX_Mezzi_ParcheggioCorrente");

                    b.HasIndex("Matricola")
                        .IsUnique()
                        .HasDatabaseName("IX_Mezzi_Matricola_Unique");

                    b.HasIndex("Stato")
                        .HasDatabaseName("IX_Mezzi_Stato");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Mezzi_Tipo");

                    b.HasIndex("Stato", "Tipo")
                        .HasDatabaseName("IX_Mezzi_Stato_Tipo");

                    b.HasIndex("Tipo", "LivelloBatteria", "Stato")
                        .HasDatabaseName("IX_Mezzi_Tipo_Batteria_Stato");

                    b.ToTable("Mezzi", t =>
                        {
                            t.HasCheckConstraint("CK_Mezzi_LivelloBatteria", "[LivelloBatteria] >= 0 AND [LivelloBatteria] <= 100");
                        });
                });

            modelBuilder.Entity("Mobishare.Core.Models.Parcheggio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Attivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("Capienza")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Indirizzo")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Zona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Attivo")
                        .HasDatabaseName("IX_Parcheggi_Attivo");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Parcheggi_Nome_Unique");

                    b.HasIndex("Zona")
                        .HasDatabaseName("IX_Parcheggi_Zona");

                    b.HasIndex("Zona", "Attivo")
                        .HasDatabaseName("IX_Parcheggi_Zona_Attivo");

                    b.ToTable("Parcheggi", t =>
                        {
                            t.HasCheckConstraint("CK_Parcheggi_Capienza", "[Capienza] >= 0");
                        });
                });

            modelBuilder.Entity("Mobishare.Core.Models.Ricarica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataRicarica")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdUtente")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ImportoRicarica")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataRicarica")
                        .HasDatabaseName("IX_Ricariche_DataRicarica");

                    b.HasIndex("IdUtente")
                        .HasDatabaseName("IX_Ricariche_IdUtente");

                    b.HasIndex("Stato")
                        .HasDatabaseName("IX_Ricariche_Stato");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Ricariche_Tipo");

                    b.HasIndex("DataRicarica", "Stato")
                        .HasDatabaseName("IX_Ricariche_Data_Stato");

                    b.HasIndex("IdUtente", "Stato")
                        .HasDatabaseName("IX_Ricariche_Utente_Stato");

                    b.HasIndex("IdUtente", "Stato", "ImportoRicarica")
                        .HasDatabaseName("IX_Ricariche_Utente_Stato_Importo");

                    b.ToTable("Ricariche", t =>
                        {
                            t.HasCheckConstraint("CK_Ricarica_ImportoPositivo", "ImportoRicarica > 0");

                            t.HasCheckConstraint("CK_Ricarica_ImportoRange", "ImportoRicarica > 0 AND ImportoRicarica <= 1000");
                        });
                });

            modelBuilder.Entity("Mobishare.Core.Models.Transazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorsaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataTransazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("IdCorsa")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdRicarica")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdUtente")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Importo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CorsaId");

                    b.HasIndex("DataTransazione")
                        .HasDatabaseName("IX_Transazioni_DataTransazione");

                    b.HasIndex("IdCorsa")
                        .HasDatabaseName("IX_Transazioni_IdCorsa");

                    b.HasIndex("IdRicarica")
                        .HasDatabaseName("IX_Transazioni_IdRicarica");

                    b.HasIndex("IdUtente")
                        .HasDatabaseName("IX_Transazioni_IdUtente");

                    b.HasIndex("Stato")
                        .HasDatabaseName("IX_Transazioni_Stato");

                    b.HasIndex("UtenteId");

                    b.HasIndex("IdUtente", "DataTransazione")
                        .HasDatabaseName("IX_Transazioni_Utente_Data");

                    b.HasIndex("IdUtente", "Stato")
                        .HasDatabaseName("IX_Transazioni_Utente_Stato");

                    b.HasIndex("DataTransazione", "Stato", "Importo")
                        .HasDatabaseName("IX_Transazioni_Data_Stato_Importo");

                    b.ToTable("Transazioni", t =>
                        {
                            t.HasCheckConstraint("CK_Transazione_TipoTransazione", "(IdCorsa IS NOT NULL AND IdRicarica IS NULL) OR (IdCorsa IS NULL AND IdRicarica IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Mobishare.Core.Models.Utente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Credito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DebitoResiduo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ruolo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sospeso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Utenti");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Corsa", b =>
                {
                    b.HasOne("Mobishare.Core.Models.Parcheggio", "ParcheggioPrelievo")
                        .WithMany("CorsePrelievo")
                        .HasForeignKey("IdParcheggioPrelievo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mobishare.Core.Models.Parcheggio", "ParcheggioRilascio")
                        .WithMany("CorseRilascio")
                        .HasForeignKey("IdParcheggioRilascio")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mobishare.Core.Models.Utente", null)
                        .WithMany("Corse")
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mobishare.Core.Models.Mezzo", "Mezzo")
                        .WithMany("Corse")
                        .HasForeignKey("MatricolaMezzo")
                        .HasPrincipalKey("Matricola")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mobishare.Core.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId");

                    b.Navigation("Mezzo");

                    b.Navigation("ParcheggioPrelievo");

                    b.Navigation("ParcheggioRilascio");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Feedback", b =>
                {
                    b.HasOne("Mobishare.Core.Models.Corsa", "Corsa")
                        .WithMany()
                        .HasForeignKey("IdCorsa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mobishare.Core.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corsa");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Mezzo", b =>
                {
                    b.HasOne("Mobishare.Core.Models.Parcheggio", "ParcheggioCorrente")
                        .WithMany("Mezzi")
                        .HasForeignKey("IdParcheggioCorrente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParcheggioCorrente");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Ricarica", b =>
                {
                    b.HasOne("Mobishare.Core.Models.Utente", "Utente")
                        .WithMany("RicaricheUtente")
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Transazione", b =>
                {
                    b.HasOne("Mobishare.Core.Models.Corsa", "Corsa")
                        .WithMany()
                        .HasForeignKey("CorsaId");

                    b.HasOne("Mobishare.Core.Models.Corsa", null)
                        .WithMany()
                        .HasForeignKey("IdCorsa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mobishare.Core.Models.Ricarica", null)
                        .WithMany()
                        .HasForeignKey("IdRicarica")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mobishare.Core.Models.Utente", null)
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Mobishare.Core.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId");

                    b.Navigation("Corsa");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Mezzo", b =>
                {
                    b.Navigation("Corse");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Parcheggio", b =>
                {
                    b.Navigation("CorsePrelievo");

                    b.Navigation("CorseRilascio");

                    b.Navigation("Mezzi");
                });

            modelBuilder.Entity("Mobishare.Core.Models.Utente", b =>
                {
                    b.Navigation("Corse");

                    b.Navigation("RicaricheUtente");
                });
#pragma warning restore 612, 618
        }
    }
}
